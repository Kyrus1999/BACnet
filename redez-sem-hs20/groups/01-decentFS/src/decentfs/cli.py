import api
import argparse
import logging
import pathlib
import sys
from datetime import datetime


def _main(argv) -> None:
    logging.basicConfig(format='%(levelname)s: %(message)s', level=logging.WARNING)
    parser = argparse.ArgumentParser(description='BACnet DecentFS cli', epilog='Version: ' + api.DecentFs.VERSION)
    parser.add_argument('--keyfile', help='A key generated by crypto.py', type=pathlib.Path)
    parser.add_argument('--storage', help='Use an existing DecentFS path', type=pathlib.Path)
    parser.add_argument('--opt', help='Pass custom options', type=ascii)
    parser.add_argument('--verbose', help='Verbose logging', action='store_true')
    parser.add_argument('--debug', help='Debug logging (overwrites verbose)', action='store_true')

    xorarg = parser.add_mutually_exclusive_group()
    xorarg.add_argument('--copy', help='Copy from source to target', nargs=2, type=pathlib.Path)
    xorarg.add_argument('--dump', help='Dump file system', action='store_true')
    xorarg.add_argument('--move', help='Move from source to target', nargs=2, type=pathlib.Path)
    xorarg.add_argument('--read', help='File to read from DecentFS', type=pathlib.Path)
    xorarg.add_argument('--remove', help='Unlink path in DecentFS', type=pathlib.Path)
    xorarg.add_argument('--stat', help='Get stat of file', type=pathlib.Path)
    xorarg.add_argument('--write', help='File to write to DecentFS', type=pathlib.Path)

    args = parser.parse_args()

    if args.verbose:
        logging.getLogger().setLevel(logging.INFO)

    if args.debug:
        logging.getLogger().setLevel(logging.DEBUG)

    myDecentFs = None

    if args.keyfile is None:
        logging.error('No keyfile specified')
        parser.print_help()
        sys.exit(1)

    if args.opt is None:
        opt = ''
    else:
        opt = args.opt

    if args.storage is None:
        try:
            myDecentFs = api.DecentFs(args.keyfile, opt=opt)
        except FileExistsError:
            logging.error('File or Directory already exists')
            sys.exit(1)
    else:
        myDecentFs = api.DecentFs(args.keyfile, args.storage, opt=opt)

    if args.write is not None:
        myDecentFs.writeFile(args.write)

    if args.stat is not None:
        stat = myDecentFs.stat(args.stat)
        if stat is None:
            logging.error('File not found.')
            sys.exit(1)
        date = datetime.fromtimestamp(stat['timestamp']/1000000000)
        size = _bytes_fmt(stat['bytes'])
        print('Path: {}\nFlags: {}\nTime: {}\nSize: {}'.format(stat['path'], stat['flags'], date.strftime('%c'), size))
        if args.verbose or args.debug:
            print('Blocks: {}'.format(stat['blocks']))


    if args.copy is not None:
        try:
            myDecentFs.copy(args.copy[0], args.copy[1])
        except Exception(e):
            logging.error(e)
            sys.exit(1)

    if args.dump:
        myDecentFs.dump()

    if args.read is not None:
        try:
            output = open("/dev/stdout", 'wb')
            myDecentFs.readFile(args.read, buf=output)
        except FileExistsError:
            logging.error('File not found.')
            sys.exit(1)


    if args.move is not None:
        try:
            myDecentFs.move(args.move[0], args.move[1])
        except Exception(e):
            logging.error(e)
            sys.exit(1)


    if args.remove is not None:
        try:
            myDecentFs.unlink(args.remove)
        except Exception(e):
            logging.error(e)
            sys.exit(1)


def _bytes_fmt(num: int) -> str:
    """Tiny human readable file size

    https://bugs.python.org/issue31749
    https://gist.github.com/cbwar/d2dfbc19b140bd599daccbe0fe925597

    :param num: Bytes value
    :returns: Formated file size
    """
    for unit in ['', 'K', 'M']:
        if abs(num) < 1024.0:
            return "%3.1f %s" % (num, unit)
        num /= 1024.0
    return "%.1f%s" % (num, 'G')


if __name__ == '__main__':
    _main(sys.argv[1:])
